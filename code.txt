layout (local_size_x = 8, local_size_y = 8) in;

uniform float uTime; // used for movement
uniform float uDelta; // elapsed time between each frame
uniform float uVelDamping;
uniform float uLifeDamping;
uniform vec4 uNoiseFactor;

// https://github.com/cabbibo/glsl-curl-noise/blob/master/curl.glsl
vec3 snoiseVec3( vec3 x ){

  float s  = TDSimplexNoise(vec3( x ));
  float s1 = TDSimplexNoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));
  float s2 = TDSimplexNoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));
  vec3 c = vec3( s , s1 , s2 );
  return c;

}


vec3 curlNoise( vec3 p ){
  
  const float e = .1;
  vec3 dx = vec3( e   , 0.0 , 0.0 );
  vec3 dy = vec3( 0.0 , e   , 0.0 );
  vec3 dz = vec3( 0.0 , 0.0 , e   );

  vec3 p_x0 = snoiseVec3( p - dx );
  vec3 p_x1 = snoiseVec3( p + dx );
  vec3 p_y0 = snoiseVec3( p - dy );
  vec3 p_y1 = snoiseVec3( p + dy );
  vec3 p_z0 = snoiseVec3( p - dz );
  vec3 p_z1 = snoiseVec3( p + dz );

  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;
  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;
  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;

  const float divisor = 1.0 / ( 2.0 * e );
  return normalize( vec3( x , y , z ) * divisor );

}

// https://iquilezles.org/articles/functions/
// we need boxes to appear small, then grow to full size and then shrink again before they disappear
// function that starts at 0 goes to 1 and then goes back to 0
float parabola( float x, float k )
{
    return pow( 4.0*x*(1.0-x), k );
}



float pcurve( float x, float a, float b )
{
    float k = pow(a+b,a+b)/(pow(a,a)*pow(b,b));
    return k*pow(x,a)*pow(1.0-x,b);
}

void main()
{
	// position
	vec4 p = texelFetch(sTD2DInputs[0], ivec2(gl_GlobalInvocationID.xy), 0);
	vec4 v = texelFetch(sTD2DInputs[1], ivec2(gl_GlobalInvocationID.xy), 0);
	vec4 i = texelFetch(sTD2DInputs[2], ivec2(gl_GlobalInvocationID.xy), 0);
	
	vec3 pos = p.rgb;
	vec3 vel = v.rgb;
	vec3 ini = i.rgb;
	
	//OUTPUT BUFFERS
	// change the position based on velocity and change the velocity based on curl noise
	//position
	// using the alpha channel to reset the boxes when they start desappearing from the view
	float life = p.a;
	life -= uLifeDamping;
	
	if(life <= uLifeDamping) {
		life = 1.0;
		pos = ini;
	}
	
	pos += vel;
	imageStore(mTDComputeOutputs[0], ivec2(gl_GlobalInvocationID.xy), TDOutputSwizzle(vec4(pos, life)));

	// velocity
	// all the multiplications are for allowing a more smoth and controlled movement of the squares
	vec3 noise = uDelta * uNoiseFactor.x * curlNoise(pos * uNoiseFactor.y + uTime * uNoiseFactor.z);
	vel += noise * uNoiseFactor.w;
	vel *= uVelDamping; // to avoid the boxes from going out of the view
	
	// to shrink the boxes before they disappear
	//float size = parabola(1.0 - life, 1.0);
	float size = pcurve(1.0 - life, 1.0, 1.0);
	
	imageStore(mTDComputeOutputs[1], ivec2(gl_GlobalInvocationID.xy), TDOutputSwizzle(vec4(vel, size)));

}
